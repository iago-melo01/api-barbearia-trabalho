// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cliente {
  id        Int      @id @default(autoincrement())
  nome      String
  email     String   @unique
  senha     String // IMPORTANTE: Em produção, sempre armazene o hash da senha!
  telefone  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  avaliacoes Avaliacao[]
  agendamentos Agendamento[]

  @@map("clientes")
}

model Barbeiro {
  id        Int      @id @default(autoincrement())
  nome      String
  email     String
  telefone  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  avaliacoes Avaliacao[]
  agendamentos Agendamento[]

  @@map("barbeiros")
}

model Servico {
  id        Int      @id @default(autoincrement())
  nome      String
  descricao String
  preco     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  avaliacoes Avaliacao[]
  agendamentos Agendamento[]

  @@map("servicos")
}

model Agendamento {
  id        Int      @id @default(autoincrement())
  clienteId Int
  barbeiroId Int
  servicoId Int
  data      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cliente   Cliente  @relation(fields: [clienteId], references: [id])
  barbeiro  Barbeiro @relation(fields: [barbeiroId], references: [id])
  servico   Servico  @relation(fields: [servicoId], references: [id])

  @@map("agendamentos")
} 

model Avaliacao {
  id        Int      @id @default(autoincrement())
  clienteId Int
  barbeiroId Int
  servicoId Int
  nota      Int
  comentario String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cliente   Cliente  @relation(fields: [clienteId], references: [id])
  barbeiro  Barbeiro @relation(fields: [barbeiroId], references: [id])
  servico   Servico  @relation(fields: [servicoId], references: [id])

  @@map("avaliacoes")
}
